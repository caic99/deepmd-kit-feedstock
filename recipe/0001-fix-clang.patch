diff --git a/source/api_cc/CMakeLists.txt b/source/api_cc/CMakeLists.txt
index 6eb70c04..87d13b36 100644
--- a/source/api_cc/CMakeLists.txt
+++ b/source/api_cc/CMakeLists.txt
@@ -20,6 +20,10 @@ target_link_libraries (${libname} PUBLIC ${LIB_DEEPMD}	${TensorFlow_LIBRARY} ${T
 target_include_directories(${libname} PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/include ${CMAKE_CURRENT_BINARY_DIR})
 target_include_directories(${libname} PRIVATE ${TensorFlow_INCLUDE_DIRS})
 
+if(Protobuf_LIBRARY)
+  target_link_libraries(${libname} PRIVATE ${Protobuf_LIBRARY})
+endif()
+
 # link: libpython3.x.so
 if (USE_TF_PYTHON_LIBS)
   target_link_libraries (${libname} PUBLIC ${Python_LIBRARIES})
@@ -34,6 +38,9 @@ target_compile_definitions(${libname}
   PUBLIC ${prec_def}
   PRIVATE TF_PRIVATE
 )
+if (CMAKE_TESTING_ENABLED)
+  target_link_libraries(${libname} PRIVATE coverage_config)
+endif()
 
 install(TARGETS ${libname} DESTINATION lib/)
 
diff --git a/source/cmake/Findtensorflow.cmake b/source/cmake/Findtensorflow.cmake
index 97d21b84..0ec28fcc 100644
--- a/source/cmake/Findtensorflow.cmake
+++ b/source/cmake/Findtensorflow.cmake
@@ -56,7 +56,6 @@ if(BUILD_PY_IF)
 	# here TENSORFLOW_ROOT is path to site-packages/tensorflow
 	# for conda libraries, append extra paths
 	list(APPEND TensorFlow_search_PATHS "${TENSORFLOW_ROOT}/../tensorflow_core")
-	list(APPEND TensorFlow_search_PATHS "${TENSORFLOW_ROOT}/../../../..")
 endif()
 
 # includes
@@ -71,14 +70,6 @@ find_path(TensorFlow_INCLUDE_DIRS
   PATH_SUFFIXES "/include"
   NO_DEFAULT_PATH
   )
-find_path(TensorFlow_INCLUDE_DIRS_GOOGLE
-  NAMES 
-  google/protobuf/type.pb.h
-  PATHS ${TensorFlow_search_PATHS} 
-  PATH_SUFFIXES "/include"
-  NO_DEFAULT_PATH
-  )
-list(APPEND TensorFlow_INCLUDE_DIRS ${TensorFlow_INCLUDE_DIRS_GOOGLE})
   
 if (NOT TensorFlow_INCLUDE_DIRS AND tensorflow_FIND_REQUIRED)
   message(FATAL_ERROR 
@@ -150,6 +141,48 @@ foreach (module ${TensorFlowFramework_FIND_COMPONENTS})
   endif ()
 endforeach ()
 
+# find protobuf header
+find_path(TensorFlow_INCLUDE_DIRS_GOOGLE
+  NAMES 
+  google/protobuf/type.pb.h
+  PATHS ${TensorFlow_search_PATHS} 
+  PATH_SUFFIXES "/include"
+  NO_DEFAULT_PATH
+  )
+  # try to find from ldd list of TF library
+  # a warning is threw here, just ignore it
+  # https://stackoverflow.com/a/49738486/9567349
+  if ($ENV{LD_LIBRARY_PATH})
+    string(REPLACE ":" ";" _LD_LIBRARY_DIRS $ENV{LD_LIBRARY_PATH})
+  endif()
+  file(GET_RUNTIME_DEPENDENCIES
+    RESOLVED_DEPENDENCIES_VAR TensorFlow_LINKED_LIBRARIES
+    UNRESOLVED_DEPENDENCIES_VAR TensorFlow_LINKED_LIBRARIES_UNRESOLVED
+    LIBRARIES ${TensorFlowFramework_LIBRARY}
+    POST_INCLUDE_REGEXES "^.+protobuf\..+$"
+    DIRECTORIES ${_LD_LIBRARY_DIRS}
+  )
+  # search protobuf from linked libraries
+  foreach(_lib ${TensorFlow_LINKED_LIBRARIES})
+      string(REGEX MATCH "^.+protobuf\..+$" _protobuf_lib ${_lib})
+      if (_protobuf_lib)
+        set(Protobuf_LIBRARY ${_protobuf_lib})
+        break()
+      endif()
+  endforeach()
+if (NOT TensorFlow_INCLUDE_DIRS_GOOGLE)
+  message(STATUS "Protobuf headers are not found in the directory of TensorFlow, assuming external protobuf was used to build TensorFlow")
+  if (NOT Protobuf_LIBRARY)
+    message(FATAL_ERROR "TensorFlow is not linked to protobuf")
+  endif()
+  get_filename_component(Protobuf_LIBRARY_DIRECTORY ${Protobuf_LIBRARY} DIRECTORY)
+  # assume the include directory is ../include
+  set(Protobuf_INCLUDE_DIR ${Protobuf_LIBRARY_DIRECTORY}/../include)
+  find_package(Protobuf REQUIRED)
+  set(TensorFlow_INCLUDE_DIRS_GOOGLE ${Protobuf_INCLUDE_DIRS})
+endif()
+list(APPEND TensorFlow_INCLUDE_DIRS ${TensorFlow_INCLUDE_DIRS_GOOGLE})
+
 if (BUILD_CPP_IF)
   # define the output variable
   if (TensorFlow_INCLUDE_DIRS AND TensorFlow_LIBRARY AND TensorFlowFramework_LIBRARY)
diff --git a/source/op/CMakeLists.txt b/source/op/CMakeLists.txt
index ddcd833b..25819561 100644
--- a/source/op/CMakeLists.txt
+++ b/source/op/CMakeLists.txt
@@ -14,6 +14,9 @@ if (BUILD_CPP_IF)
   target_link_libraries (${LIB_DEEPMD_OP} PRIVATE ${LIB_DEEPMD})
   target_include_directories(${LIB_DEEPMD_OP} PUBLIC ${TensorFlow_INCLUDE_DIRS})
   set_target_properties(${LIB_DEEPMD_OP} PROPERTIES INSTALL_RPATH "$ORIGIN;${TensorFlow_LIBRARY_PATH}")
+  if (CMAKE_TESTING_ENABLED)
+    target_link_libraries(${LIB_DEEPMD_OP} PRIVATE coverage_config)
+  endif()
 endif (BUILD_CPP_IF)
 
 if (BUILD_PY_IF)
@@ -30,6 +33,9 @@ if (BUILD_PY_IF)
   target_link_libraries(
     op_grads PRIVATE ${TensorFlowFramework_LIBRARY}
     )
+  if(Protobuf_LIBRARY)
+    target_link_libraries(op_abi PRIVATE ${Protobuf_LIBRARY})
+  endif()
   target_include_directories(op_abi PUBLIC ${TensorFlow_INCLUDE_DIRS})
   target_include_directories(op_grads PUBLIC ${TensorFlow_INCLUDE_DIRS})
   if (APPLE)
@@ -55,6 +61,10 @@ if (BUILD_PY_IF)
     INSTALL_RPATH $ORIGIN
     )
   endif ()
+  if (CMAKE_TESTING_ENABLED)
+    target_link_libraries(op_abi PRIVATE coverage_config)
+    target_link_libraries(op_grads PRIVATE coverage_config)
+  endif()
 endif (BUILD_PY_IF)
 
 if (BUILD_CPP_IF)
diff --git a/source/api_cc/src/AtomMap.cc b/source/api_cc/src/AtomMap.cc
index 8e7e82a..809eb38 100644
--- a/source/api_cc/src/AtomMap.cc
+++ b/source/api_cc/src/AtomMap.cc
@@ -65,6 +65,6 @@ backward (typename std::vector<VALUETYPE >::iterator out,
   }   
 }
 
-template class AtomMap<float>;
-template class AtomMap<double>;
+template class deepmd::AtomMap<float>;
+template class deepmd::AtomMap<double>;

